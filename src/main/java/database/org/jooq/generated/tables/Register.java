/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Billa;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.RegisterRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Register extends TableImpl<RegisterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>billa.register</code>
     */
    public static final Register REGISTER = new Register();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RegisterRecord> getRecordType() {
        return RegisterRecord.class;
    }

    /**
     * The column <code>billa.register.id</code>.
     */
    public final TableField<RegisterRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>billa.register.userId</code>.
     */
    public final TableField<RegisterRecord, String> USERID = createField(DSL.name("userId"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>billa.register.name</code>.
     */
    public final TableField<RegisterRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>billa.register.password</code>.
     */
    public final TableField<RegisterRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>billa.register.phoneNum</code>.
     */
    public final TableField<RegisterRecord, String> PHONENUM = createField(DSL.name("phoneNum"), SQLDataType.VARCHAR(45), this, "");

    private Register(Name alias, Table<RegisterRecord> aliased) {
        this(alias, aliased, null);
    }

    private Register(Name alias, Table<RegisterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>billa.register</code> table reference
     */
    public Register(String alias) {
        this(DSL.name(alias), REGISTER);
    }

    /**
     * Create an aliased <code>billa.register</code> table reference
     */
    public Register(Name alias) {
        this(alias, REGISTER);
    }

    /**
     * Create a <code>billa.register</code> table reference
     */
    public Register() {
        this(DSL.name("register"), null);
    }

    public <O extends Record> Register(Table<O> child, ForeignKey<O, RegisterRecord> key) {
        super(child, key, REGISTER);
    }

    @Override
    public Schema getSchema() {
        return Billa.BILLA;
    }

    @Override
    public UniqueKey<RegisterRecord> getPrimaryKey() {
        return Keys.KEY_REGISTER_PRIMARY;
    }

    @Override
    public List<UniqueKey<RegisterRecord>> getKeys() {
        return Arrays.<UniqueKey<RegisterRecord>>asList(Keys.KEY_REGISTER_PRIMARY);
    }

    @Override
    public Register as(String alias) {
        return new Register(DSL.name(alias), this);
    }

    @Override
    public Register as(Name alias) {
        return new Register(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Register rename(String name) {
        return new Register(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Register rename(Name name) {
        return new Register(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
