/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.generated.Billa;
import org.jooq.generated.tables.records.JsonExampleRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JsonExample extends TableImpl<JsonExampleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>billa.json_example</code>
     */
    public static final JsonExample JSON_EXAMPLE = new JsonExample();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JsonExampleRecord> getRecordType() {
        return JsonExampleRecord.class;
    }

    /**
     * The column <code>billa.json_example.id</code>.
     */
    public final TableField<JsonExampleRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>billa.json_example.name</code>.
     */
    public final TableField<JsonExampleRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>billa.json_example.email</code>.
     */
    public final TableField<JsonExampleRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>billa.json_example.address</code>.
     */
    public final TableField<JsonExampleRecord, JSON> ADDRESS = createField(DSL.name("address"), SQLDataType.JSON, this, "");

    private JsonExample(Name alias, Table<JsonExampleRecord> aliased) {
        this(alias, aliased, null);
    }

    private JsonExample(Name alias, Table<JsonExampleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>billa.json_example</code> table reference
     */
    public JsonExample(String alias) {
        this(DSL.name(alias), JSON_EXAMPLE);
    }

    /**
     * Create an aliased <code>billa.json_example</code> table reference
     */
    public JsonExample(Name alias) {
        this(alias, JSON_EXAMPLE);
    }

    /**
     * Create a <code>billa.json_example</code> table reference
     */
    public JsonExample() {
        this(DSL.name("json_example"), null);
    }

    public <O extends Record> JsonExample(Table<O> child, ForeignKey<O, JsonExampleRecord> key) {
        super(child, key, JSON_EXAMPLE);
    }

    @Override
    public Schema getSchema() {
        return Billa.BILLA;
    }

    @Override
    public JsonExample as(String alias) {
        return new JsonExample(DSL.name(alias), this);
    }

    @Override
    public JsonExample as(Name alias) {
        return new JsonExample(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JsonExample rename(String name) {
        return new JsonExample(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JsonExample rename(Name name) {
        return new JsonExample(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, JSON> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
