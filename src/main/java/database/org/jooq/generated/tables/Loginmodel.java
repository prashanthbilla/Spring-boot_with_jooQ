/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Billa;
import org.jooq.generated.Indexes;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.LoginmodelRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Loginmodel extends TableImpl<LoginmodelRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>billa.loginmodel</code>
     */
    public static final Loginmodel LOGINMODEL = new Loginmodel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LoginmodelRecord> getRecordType() {
        return LoginmodelRecord.class;
    }

    /**
     * The column <code>billa.loginmodel.id</code>.
     */
    public final TableField<LoginmodelRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>billa.loginmodel.name</code>.
     */
    public final TableField<LoginmodelRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    private Loginmodel(Name alias, Table<LoginmodelRecord> aliased) {
        this(alias, aliased, null);
    }

    private Loginmodel(Name alias, Table<LoginmodelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>billa.loginmodel</code> table reference
     */
    public Loginmodel(String alias) {
        this(DSL.name(alias), LOGINMODEL);
    }

    /**
     * Create an aliased <code>billa.loginmodel</code> table reference
     */
    public Loginmodel(Name alias) {
        this(alias, LOGINMODEL);
    }

    /**
     * Create a <code>billa.loginmodel</code> table reference
     */
    public Loginmodel() {
        this(DSL.name("loginmodel"), null);
    }

    public <O extends Record> Loginmodel(Table<O> child, ForeignKey<O, LoginmodelRecord> key) {
        super(child, key, LOGINMODEL);
    }

    @Override
    public Schema getSchema() {
        return Billa.BILLA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LOGINMODEL_IDX_LOGINMODEL_ID_NAME);
    }

    @Override
    public UniqueKey<LoginmodelRecord> getPrimaryKey() {
        return Keys.KEY_LOGINMODEL_PRIMARY;
    }

    @Override
    public List<UniqueKey<LoginmodelRecord>> getKeys() {
        return Arrays.<UniqueKey<LoginmodelRecord>>asList(Keys.KEY_LOGINMODEL_PRIMARY);
    }

    @Override
    public Loginmodel as(String alias) {
        return new Loginmodel(DSL.name(alias), this);
    }

    @Override
    public Loginmodel as(Name alias) {
        return new Loginmodel(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Loginmodel rename(String name) {
        return new Loginmodel(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Loginmodel rename(Name name) {
        return new Loginmodel(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
